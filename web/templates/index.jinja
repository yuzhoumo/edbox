<!doctype html>
<html>
  <head>
    <meta charset="UTF-8" />
    <title>EdBox Archive Viewer</title>

    <link rel="icon" type="image/x-icon" href="static/img/favicon.ico" />
    <link rel="apple-touch-icon" sizes="180x180" href="static/img/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="static/img/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="static/img/favicon-16x16.png">
    <link rel="mask-icon" href="static/img/safari-pinned-tab.svg" color="#5bbad5">
    <link rel="manifest" href="static/site.webmanifest">

    <script src="https://cdn.tailwindcss.com"></script>
    <!-- <link rel="stylesheet" href="static/build/tailwind.css" /> -->
    <link rel="stylesheet" href="static/css/style.css" />
    <script src="static/js/utils.js"></script>
    <script src="static/js/marked@12.0.1.min.js"></script>
    <script src="static/js/fuse.basic@7.0.0.min.js"></script>
    <script async src="static/js/mathjax/load-mathjax.js"></script>
    <script defer src="static/js/alpine/persist@3.13.8.min.js"></script>
    <script defer src="static/js/alpine/intersect@3.18.8.min.js"></script>
    <script defer src="static/js/alpine/alpinejs@3.13.8.min.js"></script>
    <script>
      /* Data (generated by jinja) */
      var getPosts = () => ({{ posts }});
      var getUsers = () => ({{ users }}).reduce((map, item) => {
        map[item.id] = item;
        return map;
      }, {});

      /* Make search function (use closure to hide local vars) */
      var searchPosts = (() => {
        const posts = getPosts();
        const options = {
          keys: [{
            name: "number",
            getFn: (post) => `@${post.number}`
          }, {
            name: "title",
            getFn: (post) => post.title
          }, {
            name: "content",
            getFn: (post) => post.content
          }, ],
        };
        const index = Fuse.createIndex(options.keys, posts);
        const fuse = new Fuse(posts, options, index);
        return (query) => {
          if (query === "") return posts;
          return fuse.search(query).map((item) => item.item);
        };
      })();

      /* Initialize global data in Alpine store */
      document.addEventListener("alpine:initializing", async () => {
        Alpine.store("data", {
          currentPost: Alpine.$persist(getPosts()[0]).using(sessionStorage),
          setCurrent(post) {
            this.currentPost = post;
          },
        });
      });
    </script>
  </head>
  <body>
    <div id="grid-view-sidebar-and-current-post" class="grid grid-cols-9 lg:grid-cols-4">
      {{ sidebar_content }}
      {{ main_content }}
    </div>
  </body>
</html>
